# -*- coding: utf-8 -*-
"""Queue using Two Stacks

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b3bN-V-Vfhn0q4t72EeU4SVjzU5IcxUL
"""

class CQ:
    def __init__(self):
        self.st_eq= []
        self.st_dq =[]
    def enqueue(self,element):
        self.st_eq.append(element)
    def dequeue(self):
        if not self.st_dq:
            while self.st_eq:
                self.st_dq.append(self.st_eq.pop())
        if not self.st_dq:
            return None
        return self.st_dq.pop()
    def print_front(self):
        if not self.st_dq:
            while self.st_eq:
                self.st_dq.append(self.st_eq.pop())
        if not self.st_dq:
            return None
        return self.st_dq[-1]
def process_queries(queries):
    custom_queue = CQ()
    results = []
    for query in queries:
        if query[0]==1:
            custom_queue.enqueue(query[1])
        elif query[0]==2:
            custom_queue.dequeue()
        elif query[0]==3:
            front_element = custom_queue.print_front()
            results.append(front_element)
    return results


inputVal =input()
queries = [list(map(int,query.split())) for query in inputVal.split(',')]
outputVal = process_queries(queries)
for result in outputVal:
    print(result)